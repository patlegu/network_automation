# CHKSUM: 2fe32760af24cfde6a24260c9c15b9366a3068840d69093b9ebb27bf57c9c83d
# Dockerfile for building Ansible image for Debian 12 (bookworm), with as few additional software as possible.
#
# @see https://launchpad.net/~ansible/+archive/ubuntu/ansible
#
# Version  0.2
#
#

# Stage 1: Builder
FROM debian:12.11-slim AS builder

LABEL maintainer="breizhlandocker <psychomonckey@hotmail.fr>"

# Set DEBIAN_FRONTEND to noninteractive for all apt commands
ENV DEBIAN_FRONTEND=noninteractive
# Define PYTHONUSERBASE for controlled installation path of pip packages
ENV PYTHONUSERBASE=/opt/python_bundle
# Ensure pip binaries are on PATH (though --user often handles this)
ENV PATH="${PYTHONUSERBASE}/bin:${PATH}"

# Terraform version
ARG TERRAFORM_VERSION="1.12.2"

RUN \
    echo "===> Updating APT cache and installing system packages..." && \
    apt-get update -y && \
    # Install build dependencies for Python packages, runtime libraries to be copied,
    # and tools needed for the build process.
    # Use --no-install-recommends to keep the image slim
    apt-get install -y --no-install-recommends \
        python3-pip python3-dev python3-setuptools \
        gcc libffi-dev libssl-dev libxml2-dev libxslt-dev locales \
        libzbar-dev libzbar0 sshpass \
        curl unzip ca-certificates && \
    \
    echo "===> Applying workaround for PEP 668 (externally managed Python environment)..." && \
#    apt-get -y --purge remove python-cffi          && \
#    python3 -m venv ~/py_envs                  &&\
#    source ~/py_envs/bin/activate              &&\
    # Workaround for PEP 668 in Debian 12 to allow global pip installs
    mv /usr/lib/python3.11/EXTERNALLY-MANAGED /usr/lib/python3.11/EXTERNALLY-MANAGED.old &&\
    \
    echo "===> Installing Python packages with pip..." && \
    # WARNING: pycrypto is deprecated and has known vulnerabilities. Consider using pycryptodome.
    # Install packages to PYTHONUSERBASE
    pip3 install --no-cache-dir --user --upgrade \
        pycryptodome \
        cffi \
        pyvmomi \
        ciscoconfparse \
        napalm \
        pypsrp \
        pyntc \
        # Adding packages previously installed via apt
        PyYAML psutil bottle requests setuptools && \
    \
    echo "===> Installing Ansible..."   && \
    pip3 install --no-cache-dir --user ansible && \
    \
    echo "===> Installing Terraform v${TERRAFORM_VERSION}..." && \
    mkdir -p /opt/terraform_install && \
    curl -sLo /tmp/terraform.zip "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" && \
    unzip -o /tmp/terraform.zip -d /opt/terraform_install/ && \
    chmod +x /opt/terraform_install/terraform && \
    rm /tmp/terraform.zip && \
    # Verify installation
    /opt/terraform_install/terraform version && \
    \
    echo "===> Preparing SSH client configuration..." && \
    mkdir -p /tmp_ssh_config/nonroot_home/.ssh && \
    echo "KexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1" > /tmp_ssh_config/nonroot_home/.ssh/config && \
    echo "Ciphers 3des-cbc,aes128-cbc,aes128-ctr,aes256-ctr" >> /tmp_ssh_config/nonroot_home/.ssh/config && \
    chmod 700 /tmp_ssh_config/nonroot_home/.ssh && \
    chmod 600 /tmp_ssh_config/nonroot_home/.ssh/config && \
    \
    # The 'locales' package is installed in the builder.
    # This should make standard locales like C.UTF-8 available to glibc.
#    echo "===> Locales package installed, will rely on C.UTF-8 in final image."  && \
    # Remove build-time dependencies
    # Clean up APT cache and lists
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


# Stage 2: Final image using distroless
FROM gcr.io/distroless/python3-debian12

LABEL maintainer="breizhlandocker <psychomonckey@hotmail.fr>"

# Terraform version (can be used for labeling or info)
ARG TERRAFORM_VERSION
ENV TERRAFORM_VERSION=${TERRAFORM_VERSION}

# Distroless images run as nonroot (UID 65532, GID 65532) by default.
# Python packages will be copied to /usr/local which is in Python's search path.
# Ensure PYTHONPATH includes the site-packages directory if needed, though /usr/local/lib/pythonX.Y/site-packages is standard.
ENV PYTHONPATH=/usr/local/lib/python3.11/site-packages
# Set locale environment variables
#ENV LANG=C.UTF-8
#ENV LANGUAGE=C
#ENV LC_ALL=C.UTF-8
ENV LANG=en_US.UTF-8
ENV LC_CTYPE=en_US.UTF-8

# Copy Python packages from builder stage
COPY --from=builder /opt/python_bundle/lib/python3.11/site-packages/ /usr/local/lib/python3.11/site-packages/
COPY --from=builder /opt/python_bundle/bin/* /usr/local/bin/

# Copy Terraform from builder stage
COPY --from=builder /opt/terraform_install/terraform /usr/local/bin/terraform

# Copy necessary shared libraries and binaries
# libzbar.so.0 (from libzbar0 package in builder)
COPY --from=builder /usr/lib/x86_64-linux-gnu/libzbar.so.0 /usr/lib/x86_64-linux-gnu/libzbar.so.0
# sshpass binary
COPY --from=builder /usr/bin/sshpass /usr/bin/sshpass

# Copy SSH client configuration for the nonroot user
# The nonroot user in gcr.io/distroless/*-debian12 has UID/GID 65532
COPY --from=builder --chown=65532:65532 /tmp_ssh_config/nonroot_home/.ssh /home/nonroot/.ssh

# Set a working directory (using /app as a neutral location)
WORKDIR /app

# Define a volume (useful for mounting playbooks, configs, etc.)
VOLUME [ "/app" ]

# Default command: Distroless images don't have a shell.
# Provide a sensible default entrypoint and command.
# Users can override this when running the container.
ENTRYPOINT [ "ansible" ]
CMD [ "--version" ]

# Set a working directory
# WORKDIR /root # Original, changed to /app for nonroot user

# CMD [ "bash", "-i" ] # Original, not possible with distroless
