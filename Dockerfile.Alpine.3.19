# CHKSUM: a8a37d0a5af1618510eb26adca5e1b77aae4bcb02f873dfb2eaff737ab9cd181
# Dockerfile for building Ansible image for Alpine Linux, with as few additional software as possible.
#
# Version  0.2-alpine
#

# pull base image
FROM alpine:3.19

LABEL maintainer="breizhlandocker <psychomonckey@hotmail.fr>"

# Terraform version
ARG TERRAFORM_VERSION="1.12.2"

# Consolidate RUN instructions to reduce layers, improve readability, and optimize image size.
RUN \
    echo "===> Updating APK cache and installing system packages..." && \
    apk update && \
    # Install runtime dependencies
    # --no-cache option reduces image size by not storing the cache
    apk add --no-cache \
        python3=3.11.13-r0 \
        py3-setuptools=70.3.0-r0 \
        py3-psutil=5.9.6-r0 \
        py3-bottle=0.12.25-r1 \
        py3-requests=2.32.4-r0 \
        py3-virtualenv=20.24.6-r0 \
        zbar=0.23.93-r0 \
        py3-yaml=6.0.1-r1 \
        sudo=1.9.15_p2-r0 \
        sshpass=1.10-r0 \
        curl=8.12.1-r0 \
        cdrkit=1.1.11-r6 \
#        unrar \
        unzip=6.0-r14 \
        bash=5.2.21-r0 \
        ca-certificates=20241121-r1 && \
    \
    # Install build dependencies as a virtual package, so they can be easily removed later
    apk add --no-cache --virtual .build-deps \
        gcc \
        musl-dev \
        py3-pip \
        python3-dev \
        libffi-dev \
        openssl-dev \
        libxml2-dev \
        libxslt-dev \
        zbar-dev && \
    \
    mv /usr/lib/python3.11/EXTERNALLY-MANAGED /usr/lib/python3.11/EXTERNALLY-MANAGED.old &&\
    \
    echo "===> Installing Python packages with pip..." && \
    # Note: Some Python packages might need specific build tools or libraries on Alpine.
    # Ensure all necessary -dev packages are included in .build-deps if pip install fails.
    pip3 install --no-cache-dir --upgrade \
        pycryptodome==3.23.0 \
        cffi==1.17.1 \
        pyvmomi==9.0.0.0 \
        ciscoconfparse==1.9.52 \
        napalm==5.0.0 \
        pypsrp==0.8.1 \
        pyntc==2.0.2 \
        paramiko==3.5.1 \
        virtualenv==20.24.6 \
        Jinja2==3.1.6 && \
    \
    echo "===> Installing Ansible..."   && \
    pip3 install --no-cache-dir ansible==11.7.0 && \
    \
    echo "===> Installing Terraform v${TERRAFORM_VERSION}..." && \
    curl -sLo /tmp/terraform.zip "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" && \
    unzip -o /tmp/terraform.zip -d /usr/local/bin/ && \
    chmod +x /usr/local/bin/terraform && \
    rm /tmp/terraform.zip && \
    # Verify installation
    /usr/local/bin/terraform version && \
    \
    echo "===> Removing build dependencies..." && \
    # Remove build-time dependencies
    apk del .build-deps && \
    # Clean up temporary files and caches (though --no-cache helps a lot)
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/* && \
    \
    echo "===> Configuring SSH client..." && \
    # La configuration SSH est maintenant gérée par prepare_env.py
    echo "SSH client configuration will be handled by entrypoint script."

# VOLUME instruction: /usr and /etc are generally not recommended as volumes.
# /root can be useful for user-specific configurations or mounted playbooks.
VOLUME [ "/root" ]

# Set a working directory
WORKDIR /root

# Simplified CMD to start an interactive bash session
CMD [ "bash", "-i" ]

# Copy scripts
COPY ./scripts/entrypoint.sh /usr/local/bin/entrypoint.sh
COPY ./scripts/prepare_env.py /usr/local/bin/prepare_env.py
COPY ./scripts/ansible.cfg /root/ansible.cfg # Copié ici pour que prepare_env.py puisse le trouver
RUN chmod +x /usr/local/bin/entrypoint.sh && chmod +x /usr/local/bin/prepare_env.py
ENTRYPOINT [ "/usr/local/bin/entrypoint.sh" ]