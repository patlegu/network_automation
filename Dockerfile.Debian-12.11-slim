# CHKSUM: 91d58c2b4cdeea492965c4f718aac9259fce3dfa25171a9a1227d41e11435a0b
# Dockerfile for building Ansible image for Debian 12 (bookworm), with as few additional software as possible.
#
# @see https://launchpad.net/~ansible/+archive/ubuntu/ansible
#
# Version  0.2
#
#

# pull base image
FROM debian:12.11-slim

LABEL maintainer="breizhlandocker <psychomonckey@hotmail.fr>"

# Set DEBIAN_FRONTEND to noninteractive for all apt commands
ENV DEBIAN_FRONTEND=noninteractive

# Terraform version
ARG TERRAFORM_VERSION="1.8.4"

# Consolidate RUN instructions to reduce layers, improve readability, and optimize image size.
RUN \
    echo "===> Updating APT cache and installing system packages..." && \
    apt-get update -y && \
    # Install essential tools, Python, build dependencies for pip packages, and runtime dependencies
    # Use --no-install-recommends to keep the image slim
    apt-get install -y --no-install-recommends \
        # Python essentials
        python3 python3-setuptools python3-psutil python3-bottle python3-requests libzbar-dev libzbar0 \
        # Ansible dependencies & common tools
        python3-yaml sudo sshpass curl genisoimage unrar-free unzip \
        # Build dependencies for Python packages (will be removed later)
        gcc python3-pip python3-dev libffi-dev libssl-dev \
        libxml2-dev libxslt-dev && \
    \
    echo "===> Applying workaround for PEP 668 (externally managed Python environment)..." && \
#    apt-get -y --purge remove python-cffi          && \
#    python3 -m venv ~/py_envs                  &&\
#    source ~/py_envs/bin/activate              &&\
    # Workaround for PEP 668 in Debian 12 to allow global pip installs
    mv /usr/lib/python3.11/EXTERNALLY-MANAGED /usr/lib/python3.11/EXTERNALLY-MANAGED.old &&\
    \
    echo "===> Installing Python packages with pip..." && \
    # WARNING: pycrypto is deprecated and has known vulnerabilities. Consider using pycryptodome.
    pip3 install --no-cache-dir --upgrade \
        pycryptodome \
        cffi \
        pyvmomi \
        ciscoconfparse \
        napalm \
        pypsrp \
        pyntc && \
    \
    echo "===> Installing Ansible..."   && \
    pip3 install --no-cache-dir ansible && \
    \
    echo "===> Installing Terraform v${TERRAFORM_VERSION}..." && \
    curl -sLo /tmp/terraform.zip "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" && \
    unzip -o /tmp/terraform.zip -d /usr/local/bin/ && \
    chmod +x /usr/local/bin/terraform && \
    rm /tmp/terraform.zip && \
    # Verify installation
    terraform version && \
    \
    echo "===> Removing build dependencies and cleaning up APT resources..." && \
    # Remove build-time dependencies
    apt-get purge -y --auto-remove \
        gcc \
        python3-pip \
        python3-dev \
        libffi-dev \
        libssl-dev \
        libxml2-dev \
        libxslt-dev && \
    # Clean up APT cache and lists
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    \
    echo "===> Configuring SSH client..." && \
    mkdir -p /root/.ssh/ && \
    echo "KexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1" > /root/.ssh/config &&\
    echo "Ciphers 3des-cbc,aes128-cbc,aes128-ctr,aes256-ctr" >> /root/.ssh/config &&\
    chown -R root:root /root/.ssh/ && \
    chmod 700 /root/.ssh/ && \
    chmod 600 /root/.ssh/config && \
    \
    echo "===> Ensuring python3 symlink..." && \
    # Ensure python3 points to the correct version (usually handled by Debian, but explicit doesn't hurt)
    ln -sf /usr/bin/python3.11 /usr/bin/python3

# VOLUME instruction: /usr and /etc are generally not recommended as volumes.
# /root can be useful for user-specific configurations or mounted playbooks.
VOLUME [ "/root" ]

# Set a working directory
WORKDIR /root

# Simplified CMD to start an interactive bash session
CMD [ "bash", "-i" ]

